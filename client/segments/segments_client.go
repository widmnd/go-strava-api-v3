// Code generated by go-swagger; DO NOT EDIT.

package segments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new segments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for segments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ExploreSegments(params *ExploreSegmentsParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSegmentsOK, error)

	GetLoggedInAthleteStarredSegments(params *GetLoggedInAthleteStarredSegmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLoggedInAthleteStarredSegmentsOK, error)

	GetSegmentByID(params *GetSegmentByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSegmentByIDOK, error)

	StarSegment(params *StarSegmentParams, authInfo runtime.ClientAuthInfoWriter) (*StarSegmentOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ExploreSegments explores segments

  Returns the top 10 segments matching a specified query.
*/
func (a *Client) ExploreSegments(params *ExploreSegmentsParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExploreSegmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exploreSegments",
		Method:             "GET",
		PathPattern:        "/segments/explore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExploreSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExploreSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExploreSegmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLoggedInAthleteStarredSegments lists starred segments

  List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.
*/
func (a *Client) GetLoggedInAthleteStarredSegments(params *GetLoggedInAthleteStarredSegmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLoggedInAthleteStarredSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoggedInAthleteStarredSegmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLoggedInAthleteStarredSegments",
		Method:             "GET",
		PathPattern:        "/segments/starred",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLoggedInAthleteStarredSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoggedInAthleteStarredSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLoggedInAthleteStarredSegmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSegmentByID gets segment

  Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
*/
func (a *Client) GetSegmentByID(params *GetSegmentByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSegmentByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSegmentById",
		Method:             "GET",
		PathPattern:        "/segments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSegmentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSegmentByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StarSegment stars segment

  Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
*/
func (a *Client) StarSegment(params *StarSegmentParams, authInfo runtime.ClientAuthInfoWriter) (*StarSegmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStarSegmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "starSegment",
		Method:             "PUT",
		PathPattern:        "/segments/{id}/starred",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StarSegmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StarSegmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StarSegmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
