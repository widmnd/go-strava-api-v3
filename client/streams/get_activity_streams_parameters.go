// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetActivityStreamsParams creates a new GetActivityStreamsParams object
// with the default values initialized.
func NewGetActivityStreamsParams() *GetActivityStreamsParams {
	var (
		keyByTypeDefault = bool(true)
	)
	return &GetActivityStreamsParams{
		KeyByType: keyByTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetActivityStreamsParamsWithTimeout creates a new GetActivityStreamsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetActivityStreamsParamsWithTimeout(timeout time.Duration) *GetActivityStreamsParams {
	var (
		keyByTypeDefault = bool(true)
	)
	return &GetActivityStreamsParams{
		KeyByType: keyByTypeDefault,

		timeout: timeout,
	}
}

// NewGetActivityStreamsParamsWithContext creates a new GetActivityStreamsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetActivityStreamsParamsWithContext(ctx context.Context) *GetActivityStreamsParams {
	var (
		keyByTypeDefault = bool(true)
	)
	return &GetActivityStreamsParams{
		KeyByType: keyByTypeDefault,

		Context: ctx,
	}
}

// NewGetActivityStreamsParamsWithHTTPClient creates a new GetActivityStreamsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetActivityStreamsParamsWithHTTPClient(client *http.Client) *GetActivityStreamsParams {
	var (
		keyByTypeDefault = bool(true)
	)
	return &GetActivityStreamsParams{
		KeyByType:  keyByTypeDefault,
		HTTPClient: client,
	}
}

/*GetActivityStreamsParams contains all the parameters to send to the API endpoint
for the get activity streams operation typically these are written to a http.Request
*/
type GetActivityStreamsParams struct {

	/*ID
	  The identifier of the activity.

	*/
	ID int64
	/*KeyByType
	  Must be true.

	*/
	KeyByType bool
	/*Keys
	  Desired stream types.

	*/
	Keys []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get activity streams params
func (o *GetActivityStreamsParams) WithTimeout(timeout time.Duration) *GetActivityStreamsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get activity streams params
func (o *GetActivityStreamsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get activity streams params
func (o *GetActivityStreamsParams) WithContext(ctx context.Context) *GetActivityStreamsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get activity streams params
func (o *GetActivityStreamsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get activity streams params
func (o *GetActivityStreamsParams) WithHTTPClient(client *http.Client) *GetActivityStreamsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get activity streams params
func (o *GetActivityStreamsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get activity streams params
func (o *GetActivityStreamsParams) WithID(id int64) *GetActivityStreamsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get activity streams params
func (o *GetActivityStreamsParams) SetID(id int64) {
	o.ID = id
}

// WithKeyByType adds the keyByType to the get activity streams params
func (o *GetActivityStreamsParams) WithKeyByType(keyByType bool) *GetActivityStreamsParams {
	o.SetKeyByType(keyByType)
	return o
}

// SetKeyByType adds the keyByType to the get activity streams params
func (o *GetActivityStreamsParams) SetKeyByType(keyByType bool) {
	o.KeyByType = keyByType
}

// WithKeys adds the keys to the get activity streams params
func (o *GetActivityStreamsParams) WithKeys(keys []string) *GetActivityStreamsParams {
	o.SetKeys(keys)
	return o
}

// SetKeys adds the keys to the get activity streams params
func (o *GetActivityStreamsParams) SetKeys(keys []string) {
	o.Keys = keys
}

// WriteToRequest writes these params to a swagger request
func (o *GetActivityStreamsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// query param key_by_type
	qrKeyByType := o.KeyByType
	qKeyByType := swag.FormatBool(qrKeyByType)
	if qKeyByType != "" {
		if err := r.SetQueryParam("key_by_type", qKeyByType); err != nil {
			return err
		}
	}

	valuesKeys := o.Keys

	joinedKeys := swag.JoinByFormat(valuesKeys, "csv")
	// query array param keys
	if err := r.SetQueryParam("keys", joinedKeys...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
